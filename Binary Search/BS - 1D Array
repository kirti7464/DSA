1. Binary Search [https://leetcode.com/problems/binary-search/description/]
** mark low,high,mid in array, if element at mid is
- greater than target shift targeted array to 1st half [from low to mid]
- less than target shift targeted array to 2nd half [from mid+1 to high]

  var search = function(nums, target) {
    let l=0,h=nums.length-1
    
    while(l<=h){
        mid=Math.floor((l+h)/2)
        if(target<nums[mid]){
            h=mid-1
        }
        else if(target==nums[mid]) return mid
        else{
            l=mid+1
        }
    }
    return -1
  };

2. Floor in a Sorted Array [https://www.geeksforgeeks.org/problems/floor-in-a-sorted-array-1587115620/1]
Input: n = 7, x = 5 arr[] = {1,2,8,10,11,12,19}
Output: 1
Explanation: Largest Number less than 5 is 2 (i.e k = 2), whose index is 1(0-based indexing).

      findFloor(arr, n, x)
      {
        let l=0,h=n-1,res=-1
        while(l<=h){
            let mid=Math.floor((l+h)/2)
            if(arr[mid]>x){
                h=mid-1
            }
            else if(x ===arr[mid]) return mid
            else{
                res=mid
                l=mid+1
            }
        }
        return res
      }

3. Ceil The Floor [https://www.geeksforgeeks.org/problems/ceil-the-floor2802/1]
Input:
N = 8, X = 7
Arr[] = {5, 6, 8, 9, 6, 5, 5, 6}
Output: 6 8
Explanation:
Floor of 7 is 6 and ceil of 7 
is 8.

  function findClosestValues(arr, x) {
    let sm = -1, lg = Number.MAX_SAFE_INTEGER;
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] <= x) {
            sm = Math.max(sm, arr[i]);
        } else {
            lg = Math.min(lg, arr[i]);
        }
    }
    if (lg === Number.MAX_SAFE_INTEGER) lg = -1;
    if (sm === x) lg = x;
    return { sm, lg };
  }

can do with problem with BS but 
- given array is unsorted
- getting TLE on using sort o(n log n) which is greater than o(n)
  function findClosestValues(arr, x) {
     let l=0,h=n-1,res=-1,lg=-1
      arr= arr.sort((a,b)=>a-b)
        while(l<=h){
            let mid=Math.floor((l+h)/2)
            if(arr[mid]>x){
                lg=mid
                h=mid-1
            }
            else if(x ===arr[mid]) return {mid,mid}
            else{
                res=mid
                l=mid+1
            }
        }
        return {arr[res],arr[lg]}
    }
