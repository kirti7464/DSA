Linked List :
It is a linear data structure that stores elements in noncontagious manner unlike array.
Here each element called as node, consists of two parts 
  - Value [stores value/ data of that element]
  - Next [stores pointer/ reference to the next node]

Basic Implementation of Linked List :
- create a class containing one head and tail of LL
- create an object with that class with some value.

* Creating structure of Node [with one node, head = tail]
      class Node{
        constructor(data){
          this.head={
            value: data,
            next:null
          }
          this.tail= this.head
        }
      }
      let list= new Node(200)
      console.log(list)

  OUTPUT ->
      Node {
        head: { value: 200, next: null },
        tail: { value: 200, next: null }
      }
      
* Insertion of Node to above created Node [adding one node to previous node, head->tail]

      class Node{
        constructor(data){
          this.head={
            value: data,
            next:null
          }
          this.tail= this.head
        }
        appendNode(data){
          let newNode={
            value: data,
            next:null
          }
          this.tail.next = newNode
          this.tail = newNode
        }
      }
      let list= new Node(200)
      list.appendNode(300)
      console.log(list)
      
  OUTPUT ->
      Node {
        head: { value: 200, next: { value: 400, next: null } },
        tail: { value: 400, next: null }
      }

* Traversing of Nodes 

      class Node{
        constructor(data){
          this.head={
            value: data,
            next:null,
          }
          this.tail= this.head
          this.size=1
        }
        appendNode(data){
          let newNode={
            value: data,
            next:null
          }
          this.tail.next = newNode
          this.tail = newNode
          this.size += 1
        }
        traversing(){
          let c=0;
          let str= this.head;
          while(c<this.size){
            console.log(str)
            str=str.next
            c++
          }
        }
      }
      let list= new Node(200)
      list.appendNode(300)
      list.appendNode(400)
      list.appendNode(500)
      list.traversing()

  OUTPUT ->
      {
        value: 200,
        next: { value: 300, next: { value: 400, next: [Object] } }
      }
      { value: 300, next: { value: 400, next: { value: 500, next: null } } }
      { value: 400, next: { value: 500, next: null } }
      { value: 500, next: null }

* Deletion of Node

      class Node{
        constructor(data){
          this.head={
            value: data,
            next:null,
          }
          this.tail= this.head
          this.size=1
        }
        appendNode(data){
          let newNode={
            value: data,
            next:null
          }
          this.tail.next = newNode
          this.tail = newNode
          this.size += 1
        }
        deleteNode(ele){
          let c=1;
          let lead= this.head;
          if(ele==1){
            this.head = this.head.next
          }
          else{
            while(c<ele-1){
            lead=lead.next
              c++
            }
            let newNode = lead.next.next
            lead.next = newNode
            this.size-=1
          }
        }
      }
      let list= new Node(200)
      list.appendNode(300)
      list.appendNode(400)
      list.appendNode(500)
      list.deleteNode(3)
      console.log(list)

  OUTPUT ->
      Node {
        head: { value: 200, next: { value: 300, next: [Object] } },
        tail: { value: 500, next: null },
        size: 3
      }
