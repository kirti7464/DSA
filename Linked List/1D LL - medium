1. Middle of the Linked List [https://leetcode.com/problems/middle-of-the-linked-list/description/]
Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.

  var middleNode = function(head) {
    let c=0;
    let start = head
    while(start){
        start=start.next
        c++
    }
    let i=0
    while(i<Math.floor(c/2)){
      head=head.next
      i++
    }
    return head
};

2. Reverse a LL [https://leetcode.com/problems/reverse-linked-list/description/]
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

  var reverseList = function(head) {
    let prev=null,next=null,start = head
    while(start!=null){
        next = start.next
        start.next =prev
        prev=start
        start=next
    }
    return prev
  };

3. Linked List Cycle [https://leetcode.com/problems/linked-list-cycle/description/]
** description was bad, store each node in another DS,and check whether
one node exists more than one time -> if yes, return true else false

  var hasCycle = function(head) {
    let start=head,visitedNode=[]
    if(!start) return false
    while(start?.next){
        if(visitedNode.includes(start)){
            return true
        }
        visitedNode.push(start)
        start=start.next
    }
    return false
};

4. Linked List Cycle II [https://leetcode.com/problems/linked-list-cycle-ii/description/]
** store each node in another DS,and check whether one node
exists more than one time -> if yes, return that node else null

  var detectCycle = function(head) {
    let start=head,visitedNodes=[]
    while(start){
        if(visitedNodes.includes(start)){
            return visitedNodes[visitedNodes.indexOf(start)]
        }
        visitedNodes.push(start)
        start=start.next
    }
    return null
 };

5. Find length of Loop [https://www.geeksforgeeks.org/problems/find-length-of-loop/1]
** store each node in another DS,and check whether one node
exists more than one time 
-> if yes,again stores those nodes in another DS, and heck whether one node
exists more than one time -> if yes, return count before duplicate node occurs
-> else 0

  var countNodesinLoop = function (head)
    {
        let start =head,c=0
        let visitedNodes=[]
        while(start){
            if(visitedNodes.includes(start)){
                let values= start,i=0,noOfNodes=[]
                while(!noOfNodes.includes(values)){
                    noOfNodes.push(values)
                    c++
                    values = values.next
                }
                return c
            }
            else{
                visitedNodes.push(start)
                start = start.next
            }
        }
        return 0
    }

6. Palindrome Linked List [https://leetcode.com/problems/palindrome-linked-list/description/]
Input: head = [1,2]
Output: false

  var isPalindrome = function(head) {
    let start = head
    let values =[]
    while(start){
        values.push(start.val)
        start=start.next
    }
    let i=0;
    while(i<Math.floor(values.length/2)){
        if(values[i]!==values[values.length-i-1])return false
        i++
    }
    return true
  };
