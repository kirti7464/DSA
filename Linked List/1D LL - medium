1. Middle of the Linked List [https://leetcode.com/problems/middle-of-the-linked-list/description/]
Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.

  var middleNode = function(head) {
    let c=0;
    let start = head
    while(start){
        start=start.next
        c++
    }
    let i=0
    while(i<Math.floor(c/2)){
      head=head.next
      i++
    }
    return head
};

2. Reverse a LL [https://leetcode.com/problems/reverse-linked-list/description/]
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

  var reverseList = function(head) {
    let prev=null,next=null,start = head
    while(start!=null){
        next = start.next
        start.next =prev
        prev=start
        start=next
    }
    return prev
  };
