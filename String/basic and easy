1. Reverse Words in a String [https://leetcode.com/problems/reverse-words-in-a-string/description/]
Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.

  var reverseWords = function(s) {
    let x= s.trim().split(/\s+/).filter(word => word !== "").reverse()
    return x.join(" ")
  };

2. Longest Common Prefix [https://leetcode.com/problems/longest-common-prefix/]
Input: strs = ["flower","flow","flight"]
Output: "fl"

  var longestCommonPrefix = function (strs) {
    let str = strs[0]
    for (let i = 0; i < strs.length; i++) {
        for (let j = str.length-1;j>=0; j--) {
            if (str[j] != strs[i][j]) {
                str = str.slice(0, j)
            }
        }
    }
    return str
};

3. Isomorphic Strings [https://leetcode.com/problems/isomorphic-strings/description/]
- concat first string twice 
- find whether second string exists in concated string or not
Input: s = "egg", t = "add"
Output: true

  var isIsomorphic = function(s, t) {
    let obj={},obj1={}
    if(s.length!=t.length) return false
    for(let i=0;i<s.length;i++){
      //checking in first str if its char's indexed character in second str is same at every occurence or not 
        if(obj[s[i]]){
            if(obj[s[i]]!=t[i]) return false
        }
        else{
            obj[s[i]]=t[i]
        }
      // now checking in second str
        if(obj1[t[i]]){
            if(obj1[t[i]]!=s[i]) return false
        }
        else{
            obj1[t[i]]=s[i]
        }
        
    }
    return true
};

4. Rotate String [https://leetcode.com/problems/rotate-string/]
Input: s = "bbbacddceeb", goal = "ceebbbbacdd"
Output: true

  var rotateString = function (s, goal) {
    if(s.length!=goal.length) return false
    let nwS = s+s
    return nwS.includes(goal)
};

5. Valid Anagram [https://leetcode.com/problems/valid-anagram/description/]
- each of element of a should exists in b string
Input: s = "anagram", t = "nagaram"
Output: true

  var isAnagram = function(s, t) {
    if(s.length!=t.length) return false
    let obj={},obj1={}
    for(let i=0;i<s.length;i++){
        obj[s[i]] = (obj[s[i]]||0) +1
    }
    for(let i=0;i<t.length;i++){
        obj1[t[i]] = (obj1[t[i]]||0) +1
    }
    for(let char in obj){
        if(obj1[char]){
            if(obj[char]!=obj1[char]) return false
        }
        else return false 
    }
    return true
};

6. Sort Characters By Frequency [https://leetcode.com/problems/sort-characters-by-frequency/description/]
Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.

  var frequencySort = function(s) {
    let obj={},temp=""
    for(let i=0;i<s.length;i++){
        obj[s[i]] = (obj[s[i]] || 0)+1
    }
    let values = [...Object.entries(obj)].sort((a,b)=>b[1]-a[1])
    for(let [ch,c] of values){
        temp+=ch.repeat(c)
    }
    return temp
};

7. Romans to Integer [https://leetcode.com/problems/roman-to-integer/]
Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.

  var romanToInt = function (s) {
    const romans = {
        I: 1,
        V: 5,
        X: 10,
        L: 50,
        C: 100,
        D: 500,
        M: 1000
    }
    let prev=0,result=0
    for (let i = s.length - 1; i >= 0; i--) {
        let curr = romans[s[i]]
        if(curr<prev) result-=curr
        else result+=curr
        prev=curr
    }
    return result
};
