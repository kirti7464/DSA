1. Majority Element II [https://leetcode.com/problems/majority-element-ii/description/]
Input: nums = [3,2,3]
Output: [3]
Explaination :  find all elements that appear more than ⌊ n/3 ⌋ times.

  var majorityElement = function(arr) {
    let obj={},temp=[]
    for(let i=0;i<arr.length;i++){
      obj[arr[i]] = (obj[arr[i]] || 0 ) + 1
    }
    for(let freq in obj){
        if(obj[freq]>Math.floor(arr.length/3)) temp.push(freq)
    }
    return temp
};

2. 3Sum [https://leetcode.com/problems/3sum/description/]
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

  var threeSum = function(nums) {
    let res=[]
    nums.sort((a,b)=>a-b)
    for(let i=0;i<nums.length;i++){
        let l=i+1,r=nums.length-1
        let sum=0
        while(l<r){
            sum=nums[i]+nums[l]+nums[r]
            if(sum==0){
                res.push([nums[i],nums[l],nums[r]])
                while(nums[l]==nums[l+1]) l++
                while(nums[r]==nums[r-1]) r--
                l++
                r--
            }
            else if(sum>0){
                r--
            }
            else{
                l++
            }
            
        }
        while(nums[i]==nums[i+1]) i++
    }
    return res
};

3. 4Sum [https://leetcode.com/problems/4sum/description/]
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

  var fourSum = function(nums, target) {
    let res=[]
    nums.sort((a,b)=>a-b)
    for(let i=0;i<nums.length-3;i++){
        for(let j=i+1;j<nums.length-2;j++){
        let l=j+1,r=nums.length-1
        let sum=0
        while(l<r){
            sum=nums[i]+nums[l]+nums[r]+nums[j]
            if(sum==target){
                res.push([nums[i],nums[j],nums[l],nums[r]])
                while(l<r && nums[l]==nums[l+1]) l++
                while(l<r && nums[r]==nums[r-1]) r--
                l++
                r--
            }
            else if(sum>target){
                r--
            }
            else{
                l++
            }
            
        }
        while(nums[j]==nums[j+1]) j++
        }
        while(nums[i]==nums[i+1]) i++
    }
    return res
`};

4. Largest subarray with 0 sum [https://www.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1]
Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.

   function maxLen(arr,n){
    let obj={},c=0,sum=0
    for(let i=0;i<n;i++){
      sum+=arr[i]
      if(sum==0) c =i+1
      else{
        if(obj.hasOwnProperty(sum)) c = Math.max(c,i-obj[sum])
        else obj[sum]=i
      }
    }
    return c;
   }

5. Subarray with given XOR
Input 1:
 A = [4, 2, 2, 6, 4]
 B = 6
Output 1:
 4

   function solve (A, B){
        let obj={},c=0,xor=0
        for(let i=0;i<A.length;i++){
            xor^=A[i]
            if(xor===B) c++
            let x = xor^B
            if(x in obj){
                c += obj[x]
            }
            obj[xor] = (obj[xor] || 0) +1
        }
        return c
	}

6. Merge Sorted Array [https://leetcode.com/problems/merge-sorted-array/description/]
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]

	var merge = function(nums1, m, nums2, n) {
	    let j=0
	    for(let i=0;i<nums1.length;i++){
	        if(nums1[i]==0 && j<n){
	            nums1[i]=nums2[j]
	            j++
	        }
	    }
	    return nums1.sort((a,b)=>a-b)
	};
