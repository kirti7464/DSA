1. Two Sum
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

  var twoSum = function(nums, target) {
    for(let i=0;i<nums.length;i++){
        for(let j=1;j<nums.length;j++){
            if(nums[i]+nums[j]==target && i!=j ) return [i,j]
        }
      }
  };

2. Sort Colors [https://leetcode.com/problems/sort-colors/description/]
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

  var sortColors = function(nums) {
    let l=0,mid=0,h=nums.length-1,temp
    while(mid<=h){
        if(nums[mid]==0){
            temp=nums[l]
            nums[l]=nums[mid]
            nums[mid]=temp
            l++
            mid++
        }
        else if(nums[mid]==2){
            temp=nums[h]
            nums[h]=nums[mid]
            nums[mid]=temp
            h--
        }
        else{
            mid++
        }
      }
      return nums
  };

3. Majority Element [https://leetcode.com/problems/majority-element/description/]
Input: nums = [3,2,3]
Output: 3

  var majorityElement = function(nums) {
    let obj={}
    for(let i=0;i<nums.length;i++){
        obj[nums[i]] = (obj[nums[i]]|| 0)+1
    }
    for(let count in obj){
        if(obj[count]>nums.length/2) return count
    }
  };

4. Maximum Subarray  [https://leetcode.com/problems/maximum-subarray/description/]
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

  //1st way
  var maxSubArray = function (nums) {
    let max = -Infinity;
    for (let i = 0; i < nums.length; i++) {
        for (let j = i; j < nums.length; j++) {
            let sum = 0
            for (let k = i; k <= j; k++) {
                sum += nums[k]
            }
            max= Math.max(max,sum)
        }
    }
    return max
  };
    or
  //2nd way
  var maxSubArray = function (nums) {
    let max=nums[0],sum=[0]
    for(let i=1;i<nums.length;i++){
      sum= Math.max(nums[i], sum+ nums[i])
      if(sum>max) max= sum
    }
    return max
  }
