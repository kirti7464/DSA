1. Two Sum
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

  var twoSum = function(nums, target) {
    for(let i=0;i<nums.length;i++){
        for(let j=1;j<nums.length;j++){
            if(nums[i]+nums[j]==target && i!=j ) return [i,j]
        }
      }
  };

2. Sort Colors [https://leetcode.com/problems/sort-colors/description/]
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

  var sortColors = function(nums) {
    let l=0,mid=0,h=nums.length-1,temp
    while(mid<=h){
        if(nums[mid]==0){
            temp=nums[l]
            nums[l]=nums[mid]
            nums[mid]=temp
            l++
            mid++
        }
        else if(nums[mid]==2){
            temp=nums[h]
            nums[h]=nums[mid]
            nums[mid]=temp
            h--
        }
        else{
            mid++
        }
      }
      return nums
  };

3. Majority Element [https://leetcode.com/problems/majority-element/description/]
Input: nums = [3,2,3]
Output: 3

  var majorityElement = function(nums) {
    let obj={}
    for(let i=0;i<nums.length;i++){
        obj[nums[i]] = (obj[nums[i]]|| 0)+1
    }
    for(let count in obj){
        if(obj[count]>nums.length/2) return count
    }
  };

4. Maximum Subarray  [https://leetcode.com/problems/maximum-subarray/description/]
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

  //1st way
  var maxSubArray = function (nums) {
    let max = -Infinity;
    for (let i = 0; i < nums.length; i++) {
        for (let j = i; j < nums.length; j++) {
            let sum = 0
            for (let k = i; k <= j; k++) {
                sum += nums[k]
            }
            max= Math.max(max,sum)
        }
    }
    return max
  };
    or
  //2nd way
  var maxSubArray = function (nums) {
    let max=nums[0],sum=[0]
    for(let i=1;i<nums.length;i++){
      sum= Math.max(nums[i], sum+ nums[i])
      if(sum>max) max= sum
    }
    return max
  }

5. Best Time to Buy and Sell Stock [https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/]
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

  var maxProfit = function(prices) {
    //1st way
    // let max=0
    // for(let i=0;i<prices.length;i++){
    //     for(let j=i+1;j<prices.length;j++){
    //         if(prices[j]>prices[i]){
    //             max= Math.max(prices[j]-prices[i],max)
    //         }
    //     }
    // }
    // return max

    //2nd way - best way
    let max=0,min=Infinity
    for(let i=0;i<prices.length;i++){
        min = Math.min(min,prices[i])
        max=Math.max(max,prices[i]-min)
    }
    return max

    //3rd way
    // let min=0
    // for(let i=1;i<prices.length;i++){
    //     if(prices[min]>prices[i]) min=i;
    // }
    // let max=min
    // for(let i=min+1;i<prices.length;i++){
    //     if(prices[max]<prices[i]) max=i
    // }
    // if(max==min) return 0
    // return prices[max]-prices[min]
};

6. Rearrange Array Elements by Sign [https://leetcode.com/problems/rearrange-array-elements-by-sign/description/]
Input: nums = [3,1,-2,-5,2,-4]
Output: [3,-2,1,-5,2,-4]
Explanation:
The positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].
The only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].
Other ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.

  var rearrangeArray = function(nums) {
     let pos=[], neg=[]
    for(let i=0;i<nums.length;i++){
      if(nums[i]>0){
        pos.push(nums[i])
      }
      else {
        neg.push(nums[i])
      }
    }
     let j=0,k=0
    for(let i=0;i<nums.length ;i++){
     if(i%2==0 && j<pos.length)  {
       nums[i] = pos[j] 
       j++
     }
     else if (k<neg.length) {
       nums[i] = neg[k]
       k++
     }
    }
    return nums
};

7. Next Permutation [https://leetcode.com/problems/next-permutation/]
Input format: {1,3,2}
Output : {2,1,3}
Explanation: 
All permutations of {1,2,3} are {{1,2,3} , {1,3,2}, {2,13} , {2,3,1} , {3,1,2} , {3,2,1}}. 
So, the next permutation just after {1,3,2} is {2,1,3}.

  function reverse(nums, i, n) {
    while (i <= n) {
        temp = nums[i]
        nums[i] = nums[n]
        nums[n] = temp
        i++
        n--
    }
    return nums
  }
  var nextPermutation = function (nums) {
      let brkpnt = -1
      for (let i = nums.length - 1; i >= 0; i--) {
          if (nums[i] > nums[i - 1]) {
              brkpnt = i - 1
              break;
          }
      }
      if (brkpnt == -1) return reverse(nums, 0, nums.length - 1)
      else {
          for (let i = nums.length - 1; i >= brkpnt; i--) {
              if (nums[i] > nums[brkpnt]) {
                  [nums[i], nums[brkpnt]] = [nums[brkpnt], nums[i]]
                  break;
              }
          }
          return reverse(nums, brkpnt + 1, nums.length - 1)
      }
};

8. Leaders in an array [https://www.geeksforgeeks.org/problems/leaders-in-an-array-1587115620/1]
Input: n = 6, arr[] = {16,17,4,3,5,2}
Output: 17 5 2
Explanation: Note that there is nothing great on the right sides of 17, 5 and 2.

  leaders(n, arr) {
    //1st way
    // let temp=[]
    // for(let i=0;i<n-1;i++){
    //     let max=-1
    //     for(let j=i+1;j<n;j++){
    //         if(max<arr[j]){
    //             max=arr[j]
    //         }
    //     }
    //     if(arr[i]>=max) temp.push(arr[i])
    // }
    // temp.push(arr[n-1])
    // return temp
    //2nd way
    let temp=[],max=arr[n-1]
    for(let i=n-1;i>=0;i--){
        if(arr[i]>=max){
            temp.push(arr[i])
            max=arr[i]
        }
    }
    return temp.reverse()
    }

9. Longest Consecutive Sequence [https://leetcode.com/problems/longest-consecutive-sequence/description/]
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

  var longestConsecutive = function(nums) {
    let num=-1,c=0,max=1
    if(nums.length<1) return 0
    //1st way
    // for(let i=0;i<nums.length;i++){
    //   if(nums.includes(nums[i]+1)) {
    //     num=nums[i]
    //   }
    //   while(nums.includes(num)){
    //     num = num+1
    //     c++
    //   }
    //   max= Math.max(c,max)
    //   c=0
    // }
    // 2nd way
    numSet = new Set(nums)
    for(let i of numSet){
        if(!numSet.has(i-1)) {
            num=i
            c=1
        }
        while(numSet.has(num+1)){
            num++
            c++
        }
        max= Math.max(max,c)
    }
    return max
};

10. Set Matrix Zeroes [https://leetcode.com/problems/set-matrix-zeroes/description/]
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]

  var setZeroes = function (matrix) {
    let iArr = [], jArr = []
    for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < matrix[i].length; j++) {
            if (matrix[i][j] == 0) {
                iArr.push(i)
                jArr.push(j)
            }
        }
    }
    for (let i = 0; i < matrix.length; i++) {
        if (iArr.includes(i)) {
            for (let j = 0; j < matrix[i].length; j++) {
                matrix[i][j] = 0
            }
        }
        for (let j = 0; j < matrix[i].length; j++) {
            if(jArr.includes(j)){
                matrix[i][j] = 0
            }
        }
    }
    return matrix
};

11. Rotate Image [https://leetcode.com/problems/rotate-image/description/]
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

  var rotate = function(matrix) {
    for (let i = 0; i < matrix.length; i++) {
        for (let j = i+1; j < matrix.length; j++) {
            temp = matrix[i][j]
            matrix[i][j] = matrix[j][i]
            matrix[j][i] = temp
        }
    }
    for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < Math.floor(matrix.length/2); j++) {
          // console.log(matrix[i][j],matrix[i][matrix.length-j-1])
            temp = matrix[i][j]
            matrix[i][j] = matrix[i][matrix.length-j-1]
            matrix[i][matrix.length-j-1]= temp
        }
    }
    return matrix
};
