1. Largest element of an array
Input:
n = 5
A[] = {1, 8, 7, 56, 90}
Output:
90
Explanation:
The largest element of given array is 90.

  largest(a, n) {
       let max=a[0]
        for(let i=1;i<n;i++){
            if(a[i]>max){
                max=a[i];
            }
        }
        return max;
    }

2. Second largest element of an array
Input: 
N = 6
Arr[] = {12, 35, 1, 10, 34, 1}
Output: 34
Explanation: The largest element of the 
array is 35 and the second largest element
is 34.

  secondLargest(arr,n){
        let a = Array.from(new Set(arr));
        if (a.length < 2) {
        return -1
        }
        a= a.sort((a,b)=>a-b)
        return a[a.length-2]
  }

3. Check if Array Is Sorted and Rotated
Input: nums = [3,4,5,1,2]
Output: true
Explanation: [1,2,3,4,5] is the original sorted array.
You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].

  - divided array into two and checking whether those array are sorted or not and checking whether all element of arr1 is greater than arr2 
  - one is from 0 to that element which is less than its pervious one and other from that element to n
  - checking whether all element of arr1 is greater than arr2

  var check = function(nums) {
  function func(nums,n){
    for(let i=0;i<n;i++){
        if(nums[i]>nums[i+1]){
            if(!isSorted(nums.slice(0,i+1),nums.length,nums[i]) ||      
            !isSorted(nums.slice(i+1,n),nums.length,nums[i]) || !oneTimeDisorted(nums,i+1)) return false 
        }
    }
    return true
  }
//checking array is sorted or not
  function isSorted(nums,n){
      for(let i=0;i<n;i++){
          if(nums[i]>nums[i+1] ){
              return false
          }
      }
      return true
  }
//checking if arr1 is greater than whole arr2 or not
  function oneTimeDisorted(a,x){
      for(let i=0;i<x;i++){
          for(let j=x;j<a.length;j++){
              if(nums[i]<nums[j]) return false
          }
      }
      return true
  }
  return (func(nums,nums.length));
  };

3. Remove Duplicates from Sorted Array
Input: nums = [1,1,2]
Output: 2

  var removeDuplicates = function (nums) {
   let k=1
   for(let i=1;i<nums.length;i++){
    if(nums[i]!==nums[i-1]){
        nums[k]=nums[i]
        k++
    }
   }
   return k
};

4. Rotate Array
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]

  var rotate = function (nums, k) {
   for (let p = 0; p < k&(nums.length); p++) {
        temp = nums[nums.length - 1]
        for (let i = nums.length - 1; i > 0; i--) {
            nums[i] = nums[i - 1]
        }
       nums[0] = temp
   }
  return nums ;
  }
  or
  var rotate = function (nums, k) {
    if (nums.length <= 1) return nums
    if (k == nums.length && k % 2 == 0) return [nums[1]].concat(nums[0])
    if (k == nums.length) return nums
    k = k % nums.length;
    let x = nums.slice(-k)
    let y = nums.slice(0, nums.length - k)
    nums.splice(0, nums.length, ...x.concat(y))
    return nums ;
};

5. Move Zeroes
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

  var moveZeroes = function(nums) {
    let c=0
    for(let i=0;i<nums.length;i++){
        if(nums[i]!==0){
            nums[c]=nums[i]
            c++
        }
    }
    for(let i=c;i<nums.length;i++) nums[i]=0   
    console.log(nums)
};

6. Linear Search
Input:
N = 5, K = 6
arr[] = {1,2,3,4,6}
Output: 1
Exlpanation: Since, 6 is present in 
the array at index 4 (0-based indexing),
output is 1, else -1.

  searchInSorted(arr, N, K)
    {
        for(let i=0;i<N;i++){
            if(arr[i]==K) return 1
        }
        return -1
    }

7. Union of Two Sorted Arrays
Input: 
n = 5, arr1[] = {1, 2, 3, 4, 5}  
m = 5, arr2 [] = {1, 2, 3, 6, 7}
Output: 
1 2 3 4 5 6 7

  findUnion(arr1, arr2, n, m)
    {
        let temp= new Set()
        for(let i=0;i<n;i++){
            temp.add(arr1[i])
        }
        for(let i=0;i<m;i++){
            temp.add(arr2[i])
        }
        return Array.from(temp).sort((a,b)=>a-b)
    }

8. Missing Number
Input: nums = [3,0,1]
Output: 2
  var missingNumber = function(nums) {
    for(let i=0;i<=nums.length;i++){
        if(!nums.includes(i)) return i
    }
  };
